# Usage info
usage() {
	echo "Usage: ${0##*/} [-h] [-nh] [-o OUTPUT] [-e ERROR] [-n NAME] SCRIPT/PROGRAM [ARGS]"
}
show_help() {
	usage
	cat << EOF
Run a SCRIPT/PROGRAM with the provided ARGS in the background and save some files to recover the information (use j command for that; more details in j --help). 

	-h  | --help		display this help and exit
	-nh | --nohup	run the SCRIPT/PROGRAM ignoring HUP signals (only useful in some terminals)
	-o  | --output OUTPUT_FILE 	write the output generated by the script to OUTPUT [default=\$HOME/SCRIPT.out]
	-e  | --error ERROROUT		write the error generated by the script to ERROR [default=OUTPUT_FILE]
	-n  | --name	NAME		name to display in the information [default=SCRIPT]

	*SCRIPT/PROGRAM and ARGS must be the last parameters
	*If you want to pipe, write all the command in quotes as SCRIPT argument
EOF
}

#Initialize variables
script=""
output=""
error=""
nh="no"

while [ $# -ne 0 ];
do
	opt=$1
	shift
	case "$opt" in
		"-h" | "--help"		)	show_help 1>&2
								exit 0
								;;
		"-nh" | "--nohup"	)	nh="yes"
								;;
		"-o" | "--output"	)	output=$1
								shift
								;;
		"-e" | "--error"	)	error=$1
								shift
								;;
		"-n" | "--name"		)	name=$1
								shift
								;;
		-*					)	echo "$opt: Invalid option" 1>&2
								usage 1>&2
								exit 1
								;;
		*					) 	script=$opt
								break
								;;
	esac
done

if [ "$script" = "" ]; then
	echo "Error: No script/program provided." 1>&2
	usage 1>&2
	exit 1
fi

prefix=`basename $script`

if [ -z "$name" ]; then
	name=${prefix}
fi

if [ "$output" = "" ]; then
	output="$HOME/${prefix}.out"
fi

if [ "$error" = "" ]; then
	error="$output"
fi

# running with nohup
if [ "$nh" = "no" ]; then
	$script $@ 1>$output 2>$error &
else
	nohup $script $@ 1>$output 2>$error &
fi


# output to recovery
jobID=$!
DATE=`date +"%d/%m/%y\t%T"`

if [ "${jobID}" != "" ]; then
	echo "Job ${jobID} : $name" 1>&2
	## if removed, recover it
	mkdir -p ${PROGRAM_PATH}/jobs
	echo -e "${jobID}\t.\t${DATE}\t${name}" >> ${PROGRAM_PATH}/jobs/${jobID}.run
	exit 0
else
	echo "Error: No job generated." 1>&2
	exit 1
fi
